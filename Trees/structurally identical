Check the node data:
Compare the data field of both root1 and root2. If they are not equal, return false.

Check if the children's size is the same:
Compare the sizes of the children lists in both root1 and root2. If they are not equal, return false.

Recursive call on each child node:
Recursively check all the children. Loop through the children arrays of both trees and make a recursive call to compare corresponding children. If at any point the recursive call returns false, propagate this up and return false. If all checks pass, return true.

import java.util.ArrayList;

public class Solution {

    /* TreeNode structure 
     * 
     * class TreeNode<T> {
     *     T data;
     *     ArrayList<TreeNode<T>> children;
     * 
     *     TreeNode(T data){
     *         this.data = data;
     *         children = new ArrayList<TreeNode<T>>();
     *     }
     * }
     */
    
    public static boolean checkIdentical(TreeNode<Integer> root1, TreeNode<Integer> root2){

        // Base case: if data of root1 and root2 are not the same
        if (root1.data != root2.data) {
            return false;
        }

        // If the number of children is different, the trees are not identical
        if (root1.children.size() != root2.children.size()) {
            return false;
        }

        // Recursively check for identical structure and values in all children
        for (int i = 0; i < root1.children.size(); i++) {
            boolean smallAns = checkIdentical(root1.children.get(i), root2.children.get(i));
            //if(smallans == false)
            if (!smallAns) {
                return false;
            }
        }

        return true;
    }
}
