/*
	Following is the structure of the node class for a Singly Linked List

	class Node {
		int data;
		Node next;

		public Node(int data) {
			this.data = data;
			this.next = null;
		}

	}

*/

public class Queue {
	
	//Define the data members
     Node front;
	 Node rear;
	 int size;


	public Queue() {
		//Implement the Constructor
		front = null;
		rear = null;
        size=0;
	}
	


	/*----------------- Public Functions of Stack -----------------*/


	public int getSize() { 
		//Implement the getSize() function
		return size;
    }


    public boolean isEmpty() { 
    	//Implement the isEmpty() function
		return size==0;
    }


    public void enqueue(int data) {
    	//Implement the enqueue(element) function
		Node newnode = new Node(data);
		size++;
		if(rear == null){
			front = newnode;
			rear = newnode;
		}else{
			rear.next = newnode;
			rear = newnode;
			//rear = rear.next;
		}
    }


    public int dequeue() {
    	//Implement the dequeue() function
		if(front!=null){
			int temp = front.data;
			front = front.next;
			size--;
			if(front == null){
				rear = null;
			}
			return temp;
		}
		// else return -1;
		else{
			return -1;
		}
    }


    public int front() {
    	//Implement the front() function
		if(front!=null){
			return front.data;
		}
		else{
            return -1;
		} 
    }
}
