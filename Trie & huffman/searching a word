
class TrieNode{

	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	public int count;
	public Trie() {
		root = new TrieNode('\0');
	}

	public boolean search(String word){
		return search(root, word);
	}

	private boolean search(TrieNode root, String word) {
        // implement this function
		// If the word is empty, check if the current node is terminating
    if (word.length() == 0) {
        return root.isTerminating;
    }

    int childIndex = word.charAt(0) - 'a';
    TrieNode child = root.children[childIndex];

    // If the child node does not exist, the word is not present
    //hm yha check krre h ki child(array) usme is index pr value h ki nhi, agr nhi h vale to false wrna aage aur check kro for complete word
    if (child == null) {
        return false;
    }

    // Recursively search the remaining part of the word
    return search(child, word.substring(1));
    }

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		add(child, word.substring(1));

	}

	public void add(String word){
		add(root, word);
	}
}
