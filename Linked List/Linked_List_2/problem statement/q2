Problem statement
What will be the correct output of the code, If the linked list is 1->2->3->4->5->6 and start stores the address of node 1.

void fun(Node start)
{
  if(start == null)
    return;
  System.out.printf( start.data); 

  if(start.next != null )
    fun(start.next.next);
  System.out.printf(start.data);
}

ans - 1 3 5 5 3 1

Initial Call
The list is: 1 -> 2 -> 3 -> 4 -> 5 -> 6
Start points to node 1 (start.data = 1)
Execution Steps
First call: fun(1)

start is not null.
Print 1 (first printf in the current call).
start.next is node 2, which is not null.
Recursive call: fun(3) (since start.next.next is node 3).
Print 1 (second printf in the current call).
Second call: fun(3)

start is not null.
Print 3 (first printf in the current call).
start.next is node 4, which is not null.
Recursive call: fun(5) (since start.next.next is node 5).
Print 3 (second printf in the current call).
Third call: fun(5)

start is not null.
Print 5 (first printf in the current call).
start.next is node 6, which is not null.
Recursive call: fun(null) (since start.next.next is null).
Print 5 (second printf in the current call).
Fourth call: fun(null)

start is null.
Return immediately without printing anything.
Collating the Outputs
Combining the print statements from each function call in order of execution:

From the first call: 1, recursive call, 1
From the second call: 3, recursive call, 3
From the third call: 5, recursive call, 5
