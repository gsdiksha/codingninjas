iterative me one by one dekhenge
isliye 3 pointer lenge newnext, curr, prev
to newnext me hmesha curr ka next store krenge
usk baad curr ka next ka direction change krenge basically reverse krenge to point prev jo ki null tha
to yha connection ulta hogya h
ab prev and curr ko ek ek aage bda denge
prev will become new current
newnext will become current
end me curr!=null wo prev bn chuka hoga to return prev krdenge
1->2->3->null
null<-1<-2<-3 
/*************** 
     * Following is the Node class already written 
            class Node<T> {
                T data;
                Node<T> next;

                public Node(T data) {
                    this.data = data;
                }
            }
 ***************/

 public class Solution {

	public static Node<Integer> reverse_I(Node<Integer> head){
        
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */

         Node<Integer> curr = head;
         Node<Integer> newnext = head;
         Node<Integer> prev = null;

         while(curr!=null){
             newnext = curr.next;
             curr.next = prev;
             prev = curr;
             curr = newnext;
         }
        return prev;
        // if(head == null || head.next == null){
        //     return head;
        // }

        // Node<Integer> smallhead = reverse_I(head.next);
        // Node<Integer> reversedtail = head.next;
        // reversedtail.next = head;
        // head.next = null;
        // return smallhead;
	}
 }
